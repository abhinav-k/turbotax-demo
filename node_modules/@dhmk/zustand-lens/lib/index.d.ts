import type { State, GetState, SetState, StateCreator, StoreMutatorIdentifier, StoreApi } from "zustand/vanilla";
import { PropType } from "@dhmk/utils";
export { mergeDeep } from "@dhmk/utils";
declare type SetState2<T> = (partial: Partial<T> | ((state: T) => Partial<T> | void), replace?: boolean | undefined, ...args: any[]) => void;
declare type GetState2<T> = () => T;
export declare function createLens<T extends State, P extends string[]>(set: SetState<T>, get: GetState<T>, path: [...P]): [SetState2<PropType<T, P>>, GetState2<PropType<T, P>>];
export declare function createLens<T extends State, P extends string>(set: SetState<T>, get: GetState<T>, path: P): [SetState2<PropType<T, [P]>>, GetState2<PropType<T, [P]>>];
export declare function createLens<T extends State, P extends string[]>(set: SetState2<T>, get: GetState2<T>, path: [...P]): [SetState2<PropType<T, P>>, GetState2<PropType<T, P>>];
export declare function createLens<T extends State, P extends string>(set: SetState2<T>, get: GetState2<T>, path: P): [SetState2<PropType<T, [P]>>, GetState2<PropType<T, [P]>>];
declare type IsAny<T> = 0 extends 1 & T ? true : false;
export declare type ResolveStoreApi<X> = IsAny<X> extends true ? StoreApi<any> : X extends StoreApi<any> ? X : X extends State ? StoreApi<X> : unknown;
export declare type Setter<T extends State> = SetState2<T>;
export declare type Getter<T extends State> = GetState<T>;
export declare type Lens<T extends State, S extends State | StoreApi<State> = State, Setter extends SetState2<T> = SetState2<T>> = (set: Setter, get: GetState<T>, api: ResolveStoreApi<S>, path: ReadonlyArray<string>) => T;
export declare function lens<T extends State, S extends State | StoreApi<State> = State, Setter extends SetState2<T> = SetState2<T>>(fn: Lens<T, S, Setter>): T;
declare type WithLenses = <T extends State, Mps extends [StoreMutatorIdentifier, unknown][] = [], Mcs extends [StoreMutatorIdentifier, unknown][] = []>(f: StateCreator<T, Mps, Mcs> | T) => StateCreator<T, Mps, Mcs>;
export declare const withLenses: WithLenses;
export declare type CustomSetter<F, T extends State, S extends State> = [
    set: F,
    get: Getter<T>,
    api: ResolveStoreApi<S>,
    path: ReadonlyArray<string>
];
export declare const customSetter: (setter: any) => (fn: any) => (set: any, get: any, api: any, path: any) => any;
export declare type NamedSet<T extends State> = (partial: Partial<T> | ((state: T) => Partial<T> | void), name?: string, replace?: boolean) => void;
export declare const namedSetter: <T extends object, S extends object = any>(fn: (set: NamedSet<T>, get: Getter<T>, api: ResolveStoreApi<S>, path: readonly string[]) => T) => Lens<T, S, SetState2<T>>;
