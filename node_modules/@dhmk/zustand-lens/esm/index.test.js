import create from "zustand/vanilla";
import { immer } from "zustand/middleware/immer";
import { isDraft } from "immer";
import { createLens, lens, withLenses, namedSetter } from "./";
describe("createLens", function () {
    it("returns a scoped set/get pair", function () {
        var store = create(function (set, get) {
            var _a = createLens(set, get, ["deeply", "nested"]), _set = _a[0], _get = _a[1];
            return {
                deeply: {
                    nested: {
                        id: 123,
                        prop: "abc",
                    },
                },
                getter: _get,
                partial: function () { return _set({ prop: "def" }); },
                partialFn: function () { return _set(function (old) { return ({ prop: old.prop + "-def" }); }); },
                replace: function () { return _set({ prop: "qwe" }, true); },
                replaceFn: function () {
                    return _set(function (old) { return ({ id: 456, prop: old.prop + "-qwe" }); }, true);
                },
            };
        });
        expect(store.getState().getter()).toEqual({ id: 123, prop: "abc" });
        store.getState().partial();
        expect(store.getState().getter()).toEqual({ id: 123, prop: "def" });
        store.getState().partialFn();
        expect(store.getState().getter()).toEqual({ id: 123, prop: "def-def" });
        store.getState().replace();
        expect(store.getState().getter()).toEqual({ prop: "qwe" });
        store.getState().replaceFn();
        expect(store.getState().getter()).toEqual({ id: 456, prop: "qwe-qwe" });
    });
    it("takes `path` as `string | string[]`", function () {
        var store = {
            subA: {
                id: 123,
                value: "abc",
            },
            subB: {
                nested: {
                    id: 456,
                    value: "abc",
                },
            },
        };
        var set = function (x) { return (store = Object.assign({}, store, x(store))); };
        var get = function () { return store; };
        var _a = createLens(set, get, "subA"), aSet = _a[0], aGet = _a[1];
        aSet({ value: "def" });
        expect(aGet()).toEqual({ id: 123, value: "def" });
        var _b = createLens(set, get, ["subB", "nested"]), bSet = _b[0], bGet = _b[1];
        bSet({ value: "def" });
        expect(bGet()).toEqual({ id: 456, value: "def" });
    });
    it("passes rest arguments to parent setter", function () {
        var store = {
            subA: {
                id: 123,
                value: "abc",
            },
        };
        var set = jest.fn(function (partial, replace, arg1, arg2, arg3) {
            store = Object.assign({}, store, partial(store));
        });
        var get = function () { return store; };
        var aSet = createLens(set, get, "subA")[0];
        aSet({ value: "def" }, true, "arg1", "arg2", "arg3");
        expect(set).toBeCalledWith(expect.any(Function), false, "arg1", "arg2", "arg3");
        set.mockClear();
        aSet(function () { return ({ value: "def" }); }, true, "arg3", "arg4", "arg5");
        expect(set).toBeCalledWith(expect.any(Function), false, "arg3", "arg4", "arg5");
    });
});
describe("immer", function () {
    it("works out-of-the-box", function () {
        var store = create()(immer(withLenses(function () { return ({
            subA: lens(function (set) { return ({
                id: 123,
                name: "subA",
                changeName: function () {
                    return set(function (draft) {
                        expect(isDraft(draft)).toBeTruthy();
                        draft.name = "changed";
                    });
                },
            }); }),
            subB: lens(function (set) { return ({
                id: 234,
                name: "subB",
                changeName: function () {
                    return set(function (draft) {
                        expect(isDraft(draft)).toBeTruthy();
                        draft.name = "changed";
                    });
                },
            }); }),
        }); })));
        expect(store.getState().subA.name).toBe("subA");
        var s1 = store.getState();
        store.getState().subA.changeName();
        expect(store.getState()).not.toBe(s1);
        expect(store.getState().subA.name).toBe("changed");
        expect(store.getState().subB.name).toBe("subB");
        var s2 = store.getState();
        store.getState().subB.changeName();
        expect(store.getState()).not.toBe(s2);
        expect(store.getState().subB.name).toBe("changed");
    });
});
describe("lens", function () {
    it("calls creator function with (set, get, api, path)", function () {
        var store = create(withLenses(function (storeSet, storeGet, storeApi) { return ({
            sub: lens(function (set, get, api, path) {
                expect(set).toEqual(expect.any(Function));
                expect(get).toEqual(expect.any(Function));
                expect(api).toBe(storeApi);
                expect(path).toEqual(["sub"]);
                api.getState();
                return { name: "" };
            }),
        }); }));
        expect.assertions(4);
    });
    it("doesn`t throw an error if created outside `withLenses` function", function () {
        var todosSlice = lens(function () { return ({
            todos: [1],
        }); });
        var usersSlice = lens(function () { return ({
            users: [2],
        }); });
        var useStore = create(withLenses(function () { return ({
            todosSlice: todosSlice,
            usersSlice: usersSlice,
        }); }));
        expect(useStore.getState().todosSlice.todos).toEqual([1]);
        expect(useStore.getState().usersSlice.users).toEqual([2]);
    });
});
describe("withLenses", function () {
    it("also accepts an object config", function () {
        var store = create(withLenses({
            test: lens(function (set) { return ({
                name: "abc",
                setName: function () {
                    set({ name: "def" });
                },
            }); }),
        }));
        expect(store.getState()).toEqual({
            test: { name: "abc", setName: expect.any(Function) },
        });
        store.getState().test.setName();
        expect(store.getState().test.name).toEqual("def");
    });
    it("preserves Symbols", function () {
        var _a;
        var symbol = Symbol();
        var store = create(withLenses((_a = {
                test: lens(function () {
                    var _a;
                    return (_a = {},
                        _a[symbol] = true,
                        _a);
                })
            },
            _a[symbol] = true,
            _a)));
        expect(store.getState()[symbol]).toEqual(true);
        expect(store.getState().test[symbol]).toEqual(true);
    });
});
it("namedSetter", function () {
    var spy = jest.fn();
    var _ = null;
    var state = namedSetter(function (set) { return ({
        name: "abc",
        setName: function () {
            set({ name: "def" }, "setName");
        },
    }); })(spy, _, _, _);
    state.setName();
    expect(spy).toBeCalledWith({ name: "def" }, undefined, "setName");
});
