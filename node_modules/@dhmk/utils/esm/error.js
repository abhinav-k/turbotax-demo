var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CustomError = /** @class */ (function (_super) {
    __extends(CustomError, _super);
    function CustomError() {
        var _newTarget = this.constructor;
        var _a;
        var _this = _super.call(this) || this;
        Object.setPrototypeOf(_this, _newTarget.prototype); // a key to successful extending
        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(// a key to successful extending
        Error, _this, _newTarget);
        return _this;
    }
    return CustomError;
}(Error));
export { CustomError };
var DomainError = /** @class */ (function (_super) {
    __extends(DomainError, _super);
    function DomainError(a1, a2, a3, a4) {
        var _this = _super.call(this) || this;
        _this.context = a1;
        _this.error = a2 instanceof Error ? a2 : undefined;
        _this.code = (_this.error ? a3 : a2) || 0;
        _this.meta = _this.error ? a4 : a3;
        if (_this.error) {
            _this.message = _this.error.message;
            _this.toString = _this.error.toString.bind(_this.error);
        }
        return _this;
    }
    return DomainError;
}(CustomError));
export { DomainError };
export function handleGlobalError(fn) {
    var handleError = function (ev) { return fn(ev.error, ev); };
    var handleRejection = function (ev) { return fn(ev.reason, ev); };
    window.addEventListener("error", handleError);
    window.addEventListener("unhandledrejection", handleRejection);
    return function () {
        window.removeEventListener("error", handleError);
        window.removeEventListener("unhandledrejection", handleRejection);
    };
}
