import { Tagged } from "./types";
export declare function queue(): <T>(fn: () => Promise<T>) => Promise<T>;
export declare type Cancelled = Tagged<{}, "Cancelled">;
export declare const Cancelled: import("./types").Tag<"Cancelled">;
export declare function createChain(create: (arg: unknown) => [task: Promise<unknown>, abort: Function]): (arg: unknown) => Promise<unknown>;
export declare function chain(): <T>(fn: (as: AbortSignal) => Promise<T>) => Promise<T | Cancelled>;
export declare function flowChain(): <T>(fn: () => Promise<T> & {
    cancel(): any;
}) => Promise<T | Cancelled>;
export declare function priorityQueue(q?: <T>(fn: () => Promise<T>) => Promise<T>): <T>(fn: () => Promise<T>, priority?: number) => Promise<T>;
