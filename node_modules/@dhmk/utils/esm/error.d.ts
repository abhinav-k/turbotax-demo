export declare class CustomError extends Error {
    constructor();
}
declare type Context<T> = Exclude<T, Error | number | string>;
export declare class DomainError<T, M> extends CustomError {
    readonly context: T;
    readonly error: Error | undefined;
    readonly code: number;
    readonly meta: M | undefined;
    constructor(context: Context<T>);
    constructor(context: Context<T>, error: Error);
    constructor(context: Context<T>, errorCode: number, meta?: M);
    constructor(context: Context<T>, error: Error, errorCode: number, meta?: M);
}
export declare function handleGlobalError(fn: (error: Error, event: ErrorEvent | PromiseRejectionEvent) => void): () => void;
export {};
