export declare const array: {
    readonly insert: <T>(src: readonly T[], i: number, ...values: T[]) => T[];
    readonly append: <T_1>(src: readonly T_1[], ...values: T_1[]) => T_1[];
    readonly remove: <T_2>(src: readonly T_2[], what: T_2 extends Function ? (v: T_2, i: number, a: readonly T_2[]) => boolean : T_2 | ((v: T_2, i: number, a: readonly T_2[]) => boolean)) => T_2[];
    readonly set: <T_3>(src: readonly T_3[], i: number, what: T_3 extends Function ? (v: T_3, i: number) => T_3 : T_3 | ((v: T_3, i: number) => T_3)) => any[];
};
export declare const set: {
    readonly add: <T>(src: ReadonlySet<T>, v: T) => Set<T>;
    readonly delete: <T_1>(src: ReadonlySet<T_1>, v: T_1) => Set<T_1>;
};
export declare const map: {
    readonly set: <K, V>(src: ReadonlyMap<K, V>, k: K, v: V) => Map<K, V>;
    readonly delete: <K_1, V_1>(src: ReadonlyMap<K_1, V_1>, k: K_1) => Map<K_1, V_1>;
};
export declare const object: {
    readonly set: <T extends object, K extends keyof T = keyof T>(obj: T, key: K, what: T[K] extends Function ? (v: T[K], k: K) => T[K] : T[K] | ((v: T[K], k: K) => T[K])) => T & {
        [x: string]: any;
    };
    readonly delete: <T_1 extends object, K_1 extends keyof T_1 = keyof T_1>(obj: T_1, key: K_1) => Omit<T_1, K_1>;
    readonly merge: <T_2 extends object>(obj: T_2, what: Partial<T_2> | ((value: T_2) => Partial<T_2>)) => T_2;
};
