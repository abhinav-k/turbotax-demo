declare const defaultEntitiesKey = "byId";
declare const defaultIdsKey = "ids";
declare type DefaultEntitiesKey = typeof defaultEntitiesKey;
declare type DefaultIdsKey = typeof defaultIdsKey;
export declare type NormalizedData<T, EntitiesKey extends string = DefaultEntitiesKey, IdsKey extends string = DefaultIdsKey> = Record<EntitiesKey, Record<string, T>> & Record<IdsKey, string[]>;
declare type WithId = {
    [p: string]: any;
    id: string;
};
declare type DataAdapter<T, E extends string, I extends string> = {
    from(data: ReadonlyArray<T>): NormalizedData<T, E, I>;
    flatMap(context: NormalizedData<T, E, I>, fn: (item: T, index: number, id: string) => ReadonlyArray<T>): NormalizedData<T, E, I>;
    insert(context: NormalizedData<T, E, I>, index: number, ...items: ReadonlyArray<T>): NormalizedData<T, E, I>;
    append(context: NormalizedData<T, E, I>, ...items: ReadonlyArray<T>): NormalizedData<T, E, I>;
    remove(context: NormalizedData<T, E, I>, what: string | ((item: T, index: number, id: string) => boolean)): NormalizedData<T, E, I>;
    update(context: NormalizedData<T, E, I>, where: string | ((item: T, index: number, id: string) => boolean), what: (item: T, index: number, id: string) => T): NormalizedData<T, E, I>;
};
export declare function dataAdapter<T extends WithId>(): DataAdapter<T, DefaultEntitiesKey, DefaultIdsKey>;
export declare function dataAdapter<T, EntitiesKey extends string = DefaultEntitiesKey, IdsKey extends string = DefaultIdsKey>(getId: (item: T) => string, entitiesKey?: EntitiesKey, idsKey?: IdsKey): DataAdapter<T, EntitiesKey, IdsKey>;
export {};
