import { ValueOrFunction } from "./types";
export declare type PropType<T, Path extends string[]> = Path extends [infer K] ? K extends keyof T ? T[K] : T extends ReadonlyArray<any> ? K extends `${number}` ? T[number] : unknown : unknown : Path extends [infer K, ...infer R] ? R extends string[] ? K extends keyof T ? PropType<T[K], R> : T extends ReadonlyArray<any> ? K extends `${number}` ? PropType<T[number], R> : unknown : unknown : unknown : unknown;
export declare const getIn: <T, P extends string[]>(x: T, path: [...P]) => PropType<T, P>;
export declare const setIn: <T, P extends string[]>(x: T, path: [...P], v: ValueOrFunction<PropType<T, P>>) => T;
