"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.priorityQueue = exports.flowChain = exports.chain = exports.createChain = exports.Cancelled = exports.queue = void 0;
var fn_1 = require("./fn");
function queue() {
    var head = Promise.resolve();
    return function (fn) {
        var h = head;
        var d = (head = (0, fn_1.deferred)());
        return h.then(function () { return fn(); }).finally(function () { return d.resolve(undefined); });
    };
}
exports.queue = queue;
exports.Cancelled = {};
function createChain(create) {
    var q = queue();
    var p;
    var abort;
    var prev = { cancelled: false };
    return function (arg) {
        prev.cancelled = true;
        abort === null || abort === void 0 ? void 0 : abort();
        var cc = (prev = { cancelled: false });
        return q(function () {
            var _a;
            if (cc.cancelled)
                return Promise.resolve(exports.Cancelled);
            _a = create(arg), p = _a[0], abort = _a[1];
            return p;
        });
    };
}
exports.createChain = createChain;
function chain() {
    return createChain(function (fn) {
        var ac = new AbortController();
        return [fn(ac.signal), ac.abort.bind(ac)];
    });
}
exports.chain = chain;
function flowChain() {
    return createChain(function (fn) {
        var flow = fn();
        return [flow, flow.cancel.bind(flow)];
    });
}
exports.flowChain = flowChain;
function priorityQueue(q) {
    if (q === void 0) { q = queue(); }
    var fns = [];
    return function (fn, priority) {
        var _this = this;
        if (priority === void 0) { priority = 0; }
        var entry = { fn: fn, priority: priority, p: (0, fn_1.deferred)() };
        fns.push(entry);
        fns.sort(function (a, b) { return b.priority - a.priority; });
        q(function () { return __awaiter(_this, void 0, void 0, function () {
            var _entry;
            return __generator(this, function (_a) {
                _entry = fns.shift();
                _entry.p.resolve((0, fn_1.toPromise)(_entry.fn));
                return [2 /*return*/];
            });
        }); });
        return entry.p;
    };
}
exports.priorityQueue = priorityQueue;
