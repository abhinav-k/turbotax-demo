"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fn = __importStar(require("./fn"));
jest.useFakeTimers();
test("disposable", function () {
    var spy1 = jest.fn(function () {
        throw new Error();
    });
    var spy2 = jest.fn();
    var d = fn.disposable(spy1, spy2);
    expect(d).toThrowError(AggregateError);
    expect(spy1).toBeCalledTimes(1);
    expect(spy2).toBeCalledTimes(1);
});
describe("deferred", function () {
    test("resolve", function () { return __awaiter(void 0, void 0, void 0, function () {
        var spyThen, spyCatch, spyFinally, d, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spyThen = jest.fn();
                    spyCatch = jest.fn();
                    spyFinally = jest.fn();
                    d = fn.deferred();
                    p = d.then(spyThen).catch(spyCatch).finally(spyFinally);
                    d.resolve(1);
                    return [4 /*yield*/, p];
                case 1:
                    _a.sent();
                    expect(spyThen).toBeCalledWith(1);
                    expect(spyCatch).toBeCalledTimes(0);
                    expect(spyFinally).toBeCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    test("reject", function () { return __awaiter(void 0, void 0, void 0, function () {
        var spyThen, spyCatch, spyFinally, d, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spyThen = jest.fn();
                    spyCatch = jest.fn();
                    spyFinally = jest.fn();
                    d = fn.deferred();
                    p = d.then(spyThen).catch(spyCatch).finally(spyFinally);
                    d.reject(new Error());
                    return [4 /*yield*/, p.catch()];
                case 1:
                    _a.sent();
                    expect(spyThen).toBeCalledTimes(0);
                    expect(spyCatch).toBeCalledTimes(1);
                    expect(spyFinally).toBeCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
});
test("debounced", function () { return __awaiter(void 0, void 0, void 0, function () {
    var spy, d, r1, r2, r3, res;
    return __generator(this, function (_a) {
        spy = jest.fn(function (a, b, c) { return a + b + c; });
        d = fn.debounced(spy, 10);
        r1 = d(1, 2, 3);
        r2 = d(4, 5, 6);
        r3 = d(7, 8, 9);
        res = fn.sleep(10).then(function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        expect(spy).toBeCalledTimes(1);
                        expect(spy).toBeCalledWith(7, 8, 9);
                        _a = expect;
                        return [4 /*yield*/, r1];
                    case 1:
                        _a.apply(void 0, [_h.sent()]).toEqual(7 + 8 + 9);
                        _c = expect;
                        return [4 /*yield*/, r1];
                    case 2:
                        _d = (_b = _c.apply(void 0, [_h.sent()])).toEqual;
                        return [4 /*yield*/, r2];
                    case 3:
                        _d.apply(_b, [_h.sent()]);
                        _f = expect;
                        return [4 /*yield*/, r1];
                    case 4:
                        _g = (_e = _f.apply(void 0, [_h.sent()])).toEqual;
                        return [4 /*yield*/, r3];
                    case 5:
                        _g.apply(_e, [_h.sent()]);
                        return [2 /*return*/];
                }
            });
        }); });
        jest.runAllTimers();
        return [2 /*return*/, res];
    });
}); });
test("throttled", function () { return __awaiter(void 0, void 0, void 0, function () {
    var spy, t, r1, r2, res;
    return __generator(this, function (_a) {
        spy = jest.fn(function (a, b, c) { return a + b + c; });
        t = fn.throttled(spy, 10);
        r1 = t(1, 2, 3);
        r2 = t(4, 5, 6);
        res = fn.sleep(5).then(function () {
            var r3 = t(7, 8, 9);
            expect(spy).toBeCalledTimes(1);
            var _res = fn.sleep(5).then(function () { return __awaiter(void 0, void 0, void 0, function () {
                var r4, _a, _b, _c, _d, _e, _f, _g, _h;
                return __generator(this, function (_j) {
                    switch (_j.label) {
                        case 0:
                            r4 = t(10, 11, 12);
                            expect(spy).toBeCalledTimes(2);
                            expect(spy).nthCalledWith(1, 1, 2, 3);
                            expect(spy).nthCalledWith(2, 10, 11, 12);
                            _a = expect;
                            return [4 /*yield*/, r1];
                        case 1:
                            _a.apply(void 0, [_j.sent()]).toEqual(1 + 2 + 3);
                            _c = expect;
                            return [4 /*yield*/, r1];
                        case 2:
                            _d = (_b = _c.apply(void 0, [_j.sent()])).toEqual;
                            return [4 /*yield*/, r2];
                        case 3:
                            _d.apply(_b, [_j.sent()]);
                            _f = expect;
                            return [4 /*yield*/, r1];
                        case 4:
                            _g = (_e = _f.apply(void 0, [_j.sent()])).toEqual;
                            return [4 /*yield*/, r3];
                        case 5:
                            _g.apply(_e, [_j.sent()]);
                            _h = expect;
                            return [4 /*yield*/, r4];
                        case 6:
                            _h.apply(void 0, [_j.sent()]).toEqual(10 + 11 + 12);
                            return [2 /*return*/];
                    }
                });
            }); });
            jest.advanceTimersByTime(5);
            return _res;
        });
        jest.advanceTimersByTime(5);
        return [2 /*return*/, res];
    });
}); });
