"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.object = exports.map = exports.set = exports.array = void 0;
exports.array = {
    insert: function (src, i) {
        var values = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            values[_i - 2] = arguments[_i];
        }
        return src.slice(0, i).concat(values).concat(src.slice(i));
    },
    append: function (src) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return exports.array.insert.apply(exports.array, __spreadArray([src, src.length], values, false));
    },
    remove: function (src, what) {
        var keep = typeof what === "function"
            ? function (v, i, a) { return !what(v, i, a); }
            : function (v) { return v !== what; };
        return src.filter(keep);
    },
    set: function (src, i, what) {
        return src.map(function (x, k) {
            if (i === k) {
                return typeof what === "function" ? what(x, k) : what;
            }
            else
                return x;
        });
    },
};
exports.set = {
    add: function (src, v) {
        var set = new Set(src);
        return set.add(v);
    },
    delete: function (src, v) {
        var set = new Set(src);
        set.delete(v);
        return set;
    },
};
exports.map = {
    set: function (src, k, v) {
        var map = new Map(src);
        return map.set(k, v);
    },
    delete: function (src, k) {
        var map = new Map(src);
        map.delete(k);
        return map;
    },
};
exports.object = {
    set: function (obj, key, what) {
        var _a;
        return __assign(__assign({}, obj), (_a = {}, _a[key] = typeof what === "function" ? what(obj[key], key) : what, _a));
    },
    delete: function (obj, key) {
        var _a = obj, _b = key, _ = _a[_b], rest = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        return rest;
    },
    merge: function (obj, what) {
        return __assign(__assign({}, obj), (typeof what === "function" ? what(obj) : what));
    },
};
