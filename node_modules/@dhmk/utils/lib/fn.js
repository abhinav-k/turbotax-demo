"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancellable = exports.pLimited = exports.flow = exports.runStep = exports.g = exports.disposable = exports.immediate = exports.delayed = exports.sleep = exports.throttled = exports.debounced = exports.deferred = exports.toPromise = void 0;
var std_1 = require("./std");
var toPromise = function (fn) {
    try {
        return Promise.resolve(fn());
    }
    catch (e) {
        return Promise.reject(e);
    }
};
exports.toPromise = toPromise;
var deferred = function () {
    var resolve;
    var reject;
    var self = new Promise(function (res, rej) {
        resolve = res;
        reject = rej;
    });
    self.resolve = function (x) { return (resolve(x), self); };
    self.reject = function (e) { return (reject(e), self); };
    return self;
};
exports.deferred = deferred;
var debounced = function (fn, ms) {
    var tid;
    var p = (0, exports.deferred)();
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        clearTimeout(tid);
        tid = setTimeout(function () {
            p.resolve((0, exports.toPromise)(function () { return fn.apply(void 0, args); }));
            p = (0, exports.deferred)();
        }, ms);
        return p;
    };
};
exports.debounced = debounced;
var throttled = function (fn, ms) {
    var muted = false;
    var p;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (muted)
            return p;
        muted = true;
        setTimeout(function () { return (muted = false); }, ms);
        return (p = (0, exports.toPromise)(function () { return fn.apply(void 0, args); }));
    };
};
exports.throttled = throttled;
var sleep = function (ms) {
    return new Promise(function (res) { return setTimeout(res, ms); });
};
exports.sleep = sleep;
function delayed(fn, ms) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (0, exports.sleep)(ms).then(function () { return fn.apply(void 0, args); });
    };
}
exports.delayed = delayed;
function immediate(fn) {
    fn();
    return fn;
}
exports.immediate = immediate;
var disposable = function () {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    var isDisposed = false;
    return function () {
        if (isDisposed)
            return;
        isDisposed = true;
        var errors = [];
        fns.forEach(function (fn) {
            try {
                fn();
            }
            catch (e) {
                errors.push(e);
            }
        });
        if (errors.length)
            throw new AggregateError(errors);
    };
};
exports.disposable = disposable;
function g(x) {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, x];
            case 1: return [2 /*return*/, (_a.sent())];
        }
    });
}
exports.g = g;
var runStep = function (g, arg, isError) {
    return isError ? g.throw(arg) : g.next(arg);
};
exports.runStep = runStep;
function flow(fn, run) {
    var _this = this;
    if (run === void 0) { run = exports.runStep; }
    var ctx = {
        _g: undefined,
        isCancelled: false,
        cancel: function () {
            ctx.isCancelled = true;
            ctx._g.return(undefined);
        },
    };
    var p = new Promise(function (res, rej) {
        function step(arg, isError) {
            try {
                var _a = run(ctx._g, arg, isError), value = _a.value, done = _a.done;
                if (done)
                    res(value);
                else
                    Promise.resolve(value).then(function (x) { return step(x, false); }, function (e) { return step(e, true); });
            }
            catch (e) {
                rej(e);
            }
        }
        ctx._g = fn.call(_this, ctx);
        step(undefined, false);
    });
    p.cancel = ctx.cancel;
    return p;
}
exports.flow = flow;
function pLimited(fn, limit) {
    var stack = [];
    var i = limit;
    function run() {
        if (i > 0) {
            var entry_1 = stack.shift();
            if (!entry_1)
                return;
            --i;
            entry_1.p
                .resolve((0, exports.toPromise)(function () { return fn.apply(void 0, entry_1.args); }))
                .catch(std_1.noop)
                .finally(function () {
                i = Math.min(limit, i + 1);
                run();
            });
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var p = (0, exports.deferred)();
        stack.push({ p: p, args: args });
        run();
        return p;
    };
}
exports.pLimited = pLimited;
function cancellable(fn, onCancel) {
    if (onCancel === void 0) { onCancel = std_1.noop; }
    var isCancelled;
    fn(function (x) {
        if (isCancelled)
            return new Promise(function () { });
        // never resolves nor rejects
        else
            return x;
    });
    return function () {
        isCancelled = true;
        onCancel();
    };
}
exports.cancellable = cancellable;
