"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataAdapter = void 0;
var std_1 = require("./std");
var defaultEntitiesKey = "byId";
var defaultIdsKey = "ids";
var defaultId = function (x) { return x.id; };
function dataAdapter(getId, entitiesKey, idsKey) {
    if (getId === void 0) { getId = defaultId; }
    if (entitiesKey === void 0) { entitiesKey = defaultEntitiesKey; }
    if (idsKey === void 0) { idsKey = defaultIdsKey; }
    function from(data) {
        var _a;
        return _a = {},
            _a[entitiesKey] = (0, std_1.objectFrom)(data.map(function (x) { return [getId(x), x]; })),
            _a[idsKey] = data.map(getId),
            _a;
    }
    function flatMap(context, fn) {
        var entities = context[entitiesKey];
        var ids = context[idsKey];
        return from((0, std_1.flatMap)(ids, function (id, i) { return fn(entities[id], i, id); }));
    }
    function insert(context, index) {
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            items[_i - 2] = arguments[_i];
        }
        var atEnd = index === context[idsKey].length;
        if (atEnd)
            index--;
        return flatMap(context, function (x, i) {
            return i === index ? (atEnd ? __spreadArray([x], items, true) : __spreadArray(__spreadArray([], items, true), [x], false)) : [x];
        });
    }
    function append(context) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        return insert.apply(void 0, __spreadArray([context, context[idsKey].length], items, false));
    }
    function remove(context, what) {
        if (typeof what === "string") {
            var _id_1 = what;
            what = function (_, __, id) { return id === _id_1; };
        }
        return flatMap(context, function (x, i, id) { return (what(x, i, id) ? [] : [x]); });
    }
    function update(context, where, what) {
        var _a;
        if (typeof where === "string") {
            var _id_2 = where;
            where = function (_, __, id) { return id === _id_2; };
        }
        var entities = context[entitiesKey];
        var ids = context[idsKey];
        var isChanged;
        var nextEntities = (0, std_1.objectFrom)(ids.map(function (id, i) {
            var v = entities[id];
            if (where(v, i, id)) {
                var nextV = what(v, i, id);
                if (nextV !== v)
                    isChanged = true;
                return [id, nextV];
            }
            else
                return [id, v];
        }));
        if (!isChanged)
            return context;
        return _a = {},
            _a[entitiesKey] = nextEntities,
            _a[idsKey] = ids,
            _a;
    }
    return {
        from: from,
        flatMap: flatMap,
        insert: insert,
        append: append,
        remove: remove,
        update: update,
    };
}
exports.dataAdapter = dataAdapter;
