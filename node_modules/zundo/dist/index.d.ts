import { StoreApi, StoreMutatorIdentifier, StateCreator } from 'zustand';

type onSave<TState> = ((pastState: TState, currentState: TState) => void) | undefined;
interface TemporalStateWithInternals<TState> {
    pastStates: TState[];
    futureStates: TState[];
    undo: (steps?: number) => void;
    redo: (steps?: number) => void;
    clear: () => void;
    trackingStatus: 'paused' | 'tracking';
    pause: () => void;
    resume: () => void;
    setOnSave: (onSave: onSave<TState>) => void;
    __internal: {
        onSave: onSave<TState>;
        handleUserSet: (pastState: TState) => void;
    };
}
interface ZundoOptions<TState, PartialTState = TState> {
    partialize?: (state: TState) => PartialTState;
    limit?: number;
    equality?: (currentState: TState, pastState: TState) => boolean;
    onSave?: onSave<TState>;
    handleSet?: (handleSet: StoreApi<TState>['setState']) => StoreApi<TState>['setState'];
}
type Write<T, U> = Omit<T, keyof U> & U;
type TemporalState<TState> = Omit<TemporalStateWithInternals<TState>, '__internal'>;

type Zundo = <TState, Mps extends [StoreMutatorIdentifier, unknown][] = [], Mcs extends [StoreMutatorIdentifier, unknown][] = [], UState = TState>(config: StateCreator<TState, [...Mps, ['temporal', unknown]], Mcs>, options?: ZundoOptions<TState, UState>) => StateCreator<TState, Mps, [
    ['temporal', StoreApi<TemporalState<UState>>],
    ...Mcs
]>;
declare module 'zustand/vanilla' {
    interface StoreMutators<S, A> {
        temporal: Write<S, {
            temporal: A;
        }>;
    }
}
declare const temporal: Zundo;

export { TemporalState, Zundo, ZundoOptions, temporal };
