"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  temporal: () => temporal
});
module.exports = __toCommonJS(src_exports);

// src/temporal.ts
var import_zustand = require("zustand");
var createVanillaTemporal = (userSet, userGet, {
  partialize,
  equality,
  onSave,
  limit
} = {}) => {
  return (0, import_zustand.createStore)()((set, get) => {
    return {
      pastStates: [],
      futureStates: [],
      undo: (steps = 1) => {
        const ps = get().pastStates.slice();
        const fs = get().futureStates.slice();
        if (ps.length === 0) {
          return;
        }
        const skippedPastStates = ps.splice(ps.length - (steps - 1));
        const pastState = ps.pop();
        if (pastState) {
          fs.push(partialize(userGet()));
          userSet(pastState);
        }
        fs.push(...skippedPastStates.reverse());
        set({ pastStates: ps, futureStates: fs });
      },
      redo: (steps = 1) => {
        const ps = get().pastStates.slice();
        const fs = get().futureStates.slice();
        if (fs.length === 0) {
          return;
        }
        const skippedFutureStates = fs.splice(fs.length - (steps - 1));
        const futureState = fs.pop();
        if (futureState) {
          ps.push(partialize(userGet()));
          userSet(futureState);
        }
        ps.push(...skippedFutureStates.reverse());
        set({ pastStates: ps, futureStates: fs });
      },
      clear: () => {
        set({ pastStates: [], futureStates: [] });
      },
      trackingStatus: "tracking",
      pause: () => {
        set({ trackingStatus: "paused" });
      },
      resume: () => {
        set({ trackingStatus: "tracking" });
      },
      setOnSave: (onSave2) => {
        set((state) => ({ __internal: { ...state.__internal, onSave: onSave2 } }));
      },
      __internal: {
        onSave,
        handleUserSet: (pastState) => {
          var _a;
          const { trackingStatus, pastStates, __internal } = get();
          const ps = pastStates.slice();
          const currentState = partialize(userGet());
          if (trackingStatus === "tracking" && !(equality == null ? void 0 : equality(currentState, pastState))) {
            if (limit && ps.length >= limit) {
              ps.shift();
            }
            ps.push(pastState);
            (_a = __internal.onSave) == null ? void 0 : _a.call(__internal, pastState, currentState);
            set({ pastStates: ps, futureStates: [] });
          }
        }
      }
    };
  });
};

// src/index.ts
var zundoImpl = (config, {
  partialize = (state) => state,
  handleSet: userlandSetFactory = (handleSetCb) => handleSetCb,
  ...restOptions
} = {}) => (set, get, _store) => {
  const temporalStore = createVanillaTemporal(set, get, {
    partialize,
    ...restOptions
  });
  const store = _store;
  const { setState } = store;
  store.temporal = temporalStore;
  const curriedUserLandSet = userlandSetFactory(
    temporalStore.getState().__internal.handleUserSet
  );
  const modifiedSetState = (state, replace) => {
    const pastState = partialize(get());
    setState(state, replace);
    curriedUserLandSet(pastState);
  };
  store.setState = modifiedSetState;
  const modifiedSetter = (state, replace) => {
    const pastState = partialize(get());
    set(state, replace);
    curriedUserLandSet(pastState);
  };
  return config(modifiedSetter, get, _store);
};
var temporal = zundoImpl;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  temporal
});
//# sourceMappingURL=index.js.map