import fs from "fs";
import path from "path";
import typescript from "typescript";
// "typescript" is a CommonJS module, which may not support all module.exports as named exports
const { resolveModuleName } = typescript;
/**
 * NpmLookup is a class for retrieving information on an import.
 */
export default class NpmLookup {
    moduleName;
    rootPath;
    resolvedFilepath;
    constructor(moduleName) {
        this.moduleName = moduleName;
        const { resolvedModule, root } = this.resolveModuleName();
        this.rootPath = this.setRootPath(resolvedModule, root);
        this.resolvedFilepath = path.join(root, resolvedModule.resolvedFileName);
    }
    resolveModuleName(root = process.cwd()) {
        const customModuleResolutionHost = {
            fileExists(fileName) {
                return fs.existsSync(path.join(root, fileName));
            },
            readFile(fileName) {
                return fs.readFileSync(path.join(root, fileName), "utf-8");
            },
        };
        const { resolvedModule } = resolveModuleName(this.moduleName, "", {}, customModuleResolutionHost);
        if (!resolvedModule) {
            const parent = path.normalize(path.join(root, ".."));
            if (root === parent) {
                throw Error(`The npm package "${this.moduleName}" was not found.`);
            }
            return this.resolveModuleName(parent);
        }
        return {
            resolvedModule,
            root,
        };
    }
    setRootPath(resolvedModule, root) {
        const pathToEntry = resolvedModule.packageId?.subModuleName || "";
        const stripPathToEntryNameFromPath = resolvedModule.resolvedFileName.replace(pathToEntry, "");
        return path.join(root, stripPathToEntryNameFromPath);
    }
    getResolvedFilepath() {
        return this.resolvedFilepath;
    }
    getRootPath() {
        return this.rootPath;
    }
}
//# sourceMappingURL=NpmLookup.js.map