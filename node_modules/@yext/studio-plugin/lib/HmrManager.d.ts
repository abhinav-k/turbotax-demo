import ParsingOrchestrator from "./ParsingOrchestrator";
import { UserPaths } from "./types";
import { ViteDevServer } from "vite";
/**
 * HmrManager is responsible for handling studio specific HMR updates.
 */
export default class HmrManager {
    private orchestrator;
    private pathToUserProjectRoot;
    private userPaths;
    constructor(orchestrator: ParsingOrchestrator, pathToUserProjectRoot: string, userPaths: UserPaths);
    /**
     * If the file can be recognized as one of the user's src files,
     * update the StudioData and send a custom HMR event to the frontend.
     */
    handleHotUpdate(server: ViteDevServer, filepath: string): void;
    /**
     * Tells the client it needs to refresh its StudioData.
     */
    private static invalidateStudioData;
    private getPayload;
}
//# sourceMappingURL=HmrManager.d.ts.map