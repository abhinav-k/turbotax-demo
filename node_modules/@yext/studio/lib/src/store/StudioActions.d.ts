import { ComponentState, GetPathVal, ModuleMetadata, ModuleState, PropValues, RepeaterState, StreamScope } from "@yext/studio-plugin";
import FileMetadataSlice from "./models/slices/FileMetadataSlice";
import PageSlice from "./models/slices/PageSlice";
import SiteSettingsSlice from "./models/slices/SiteSettingsSlice";
import PreviousSaveSlice from "./models/slices/PreviousSaveSlice";
import StudioConfigSlice from "./models/slices/StudioConfigSlice";
import RepeaterActions from "./StudioActions/RepeaterActions";
import AddComponentAction from "./StudioActions/AddComponentAction";
import CreateComponentStateAction from "./StudioActions/CreateComponentStateAction";
import UpdateActivePageAction from "./StudioActions/UpdateActivePageAction";
import ImportComponentAction from "./StudioActions/ImportComponentAction";
export default class StudioActions {
    private getPages;
    private getFileMetadatas;
    private getSiteSettings;
    private getPreviousSave;
    private getStudioConfig;
    addRepeater: RepeaterActions["addRepeater"];
    removeRepeater: RepeaterActions["removeRepeater"];
    addComponent: AddComponentAction["addComponent"];
    createComponentState: CreateComponentStateAction["createComponentState"];
    updateActivePage: UpdateActivePageAction["updateActivePage"];
    importComponent: ImportComponentAction["importComponent"];
    constructor(getPages: () => PageSlice, getFileMetadatas: () => FileMetadataSlice, getSiteSettings: () => SiteSettingsSlice, getPreviousSave: () => PreviousSaveSlice, getStudioConfig: () => StudioConfigSlice);
    getComponentTree: () => ComponentState[] | undefined;
    getComponentState: (componentTree?: ComponentState[], uuid?: string) => ComponentState | undefined;
    getActiveComponentState: () => ComponentState | undefined;
    getComponentHasChildren: (uuid: string) => boolean | undefined;
    getComponentMetadata: (componentState?: ComponentState) => import("@yext/studio-plugin").ComponentMetadata | undefined;
    getModuleMetadataBeingEdited: () => ModuleMetadata | undefined;
    updateActiveComponentProps: (props: PropValues) => void;
    updateRepeaterListExpression: (listExpression: string, repeaterState: RepeaterState) => void;
    updateComponentTree: (componentTree: ComponentState[]) => void;
    replaceComponentState: (uuidToReplace: string, newComponentState: ComponentState) => void;
    removeComponent: (componentUUID: string) => void;
    /**
     * @param moduleMetadata - the {@link ModuleMetadata} of the module to detach.
     * @param instanceUUID - the instance to detach.
     */
    detachModuleInstance: (moduleMetadata: ModuleMetadata, moduleState: ModuleState) => void;
    deploy: () => Promise<void>;
    saveChanges: () => Promise<void>;
    private updatePreviousSave;
    private getSaveData;
    createPage: (pageName: string, getPathValue?: GetPathVal, streamScope?: StreamScope) => Promise<void>;
}
//# sourceMappingURL=StudioActions.d.ts.map