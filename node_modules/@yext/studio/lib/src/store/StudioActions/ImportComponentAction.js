import { ComponentStateHelpers, ComponentStateKind, FileMetadataKind, TypeGuards, } from "@yext/studio-plugin";
/**
 * Imports a component into the global store.
 *
 * Modules are not directly imported, but instead have all their constituents
 * imported instead, similar to a Page.
 */
export default class ImportComponentAction {
    getFileMetadataSlice;
    constructor(getFileMetadataSlice) {
        this.getFileMetadataSlice = getFileMetadataSlice;
    }
    importComponent = async (c) => {
        if (!TypeGuards.isEditableComponentState(c) &&
            c.kind !== ComponentStateKind.Error) {
            return;
        }
        const componentState = ComponentStateHelpers.extractRepeatedState(c);
        await this.importStandardOrModuleComponentState(componentState);
    };
    importStandardOrModuleComponentState = async (componentState) => {
        const { metadataUUID, componentName } = componentState;
        const { getFileMetadata, UUIDToImportedComponent } = this.getFileMetadataSlice();
        if (UUIDToImportedComponent.hasOwnProperty(metadataUUID)) {
            return;
        }
        const metadata = getFileMetadata(metadataUUID);
        if (!metadata) {
            return;
        }
        if (metadata.kind === FileMetadataKind.Module) {
            return this.importModule(metadata);
        }
        const importedValue = await import(/* @vite-ignore */ metadata.filepath);
        const functionComponent = getFunctionComponent(importedValue, componentName);
        if (functionComponent) {
            this.getFileMetadataSlice().setImportedComponent(metadataUUID, functionComponent);
        }
    };
    importModule = async (metadata) => {
        return Promise.all(metadata.componentTree.map((c) => this.importComponent(c)));
    };
}
function getFunctionComponent(importedValue, name) {
    if (typeof importedValue[name] === "function") {
        return importedValue[name];
    }
    else if (typeof importedValue["default"] === "function") {
        return importedValue["default"];
    }
    else {
        console.error(`${name} is not a valid functional component.`);
    }
}
//# sourceMappingURL=ImportComponentAction.js.map