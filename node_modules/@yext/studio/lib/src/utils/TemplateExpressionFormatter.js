/**
 * TemplateExpressionFormatter contains various static utility methods
 * for formatting template expression strings.
 */
export default class TemplateExpressionFormatter {
    /**
     * Converts curly braces to square brackets where needed,
     * and removes backticks.
     */
    static getTemplateStringDisplayValue(value) {
        value = this.removeBackticks(value);
        return this.convertCurlyBracesToSquareBrackets(value);
    }
    /**
     * Converts square brackets to curly braces where needed,
     * and adds backticks.
     */
    static getRawValue(value) {
        value = this.convertSquareBracketsToCurlyBraces(value);
        return this.addBackticks(value);
    }
    /**
     * Converts `[[<field>]]` usages into `${document.<field>}` and
     * `[[<field>[<num>]]]` to `${document.<field>[<num>]}`.
     */
    static convertSquareBracketsToCurlyBraces(value) {
        return value.replaceAll(/\[\[(.*?(\[\d+\])?)\]\]/g, (_substring, match) => {
            return "${document." + match + "}";
        });
    }
    /**
     * Converts `${document.<field>}` usages into `[[field]]`.
     */
    static convertCurlyBracesToSquareBrackets(value) {
        return value.replaceAll(/\${document\.(.*?)}/g, (_substring, match) => {
            return "[[" + match + "]]";
        });
    }
    static addBackticks(value) {
        return "`" + value + "`";
    }
    static removeBackticks(value) {
        if (!this.hasBackticks(value)) {
            throw new Error("Unable to remove backticks from: " + value);
        }
        return value.slice(1, -1);
    }
    static hasBackticks(value) {
        return value.length >= 2 && value.startsWith("`") && value.endsWith("`");
    }
}
//# sourceMappingURL=TemplateExpressionFormatter.js.map