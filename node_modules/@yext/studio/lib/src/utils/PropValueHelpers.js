import { PropValueKind, PropValueType } from "@yext/studio-plugin";
import TemplateExpressionFormatter from "./TemplateExpressionFormatter";
export default class PropValueHelpers {
    static getPropInputDefaultValue(type, kind) {
        if (kind === PropValueKind.Literal) {
            return this.getLiteralPropDefaultValue(type);
        }
        switch (type) {
            case PropValueType.string:
                return "``";
            case PropValueType.Array:
                return "";
            default:
                console.error(`Unknown PropValueType ${type}. Can't derive a default value based on PropValueType.`);
                return "";
        }
    }
    static getLiteralPropDefaultValue(type) {
        switch (type) {
            case PropValueType.number:
                return 0;
            case PropValueType.string:
                return "";
            case PropValueType.boolean:
                return false;
            case PropValueType.HexColor:
                return "#FFFFFF";
            default:
                console.error(`Unknown PropValueType ${type}. Can't derive a default value based on PropValueType.`);
                return "";
        }
    }
    static getPropValue(propVal, expectedPropKind) {
        if (!propVal) {
            return undefined;
        }
        const { value, valueType } = propVal;
        if (valueType === PropValueType.Object) {
            throw new Error(`Unexpected object prop ${JSON.stringify(propVal, null, 2)}`);
        }
        if (expectedPropKind === PropValueKind.Expression &&
            valueType === PropValueType.string) {
            return this.getTemplateExpression(propVal);
        }
        return value;
    }
    static getTemplateExpression({ kind, value, }) {
        const isPropertyAccessExpresion = kind === PropValueKind.Expression &&
            !TemplateExpressionFormatter.hasBackticks(value);
        if (isPropertyAccessExpresion) {
            return TemplateExpressionFormatter.addBackticks("${" + value + "}");
        }
        if (kind === PropValueKind.Literal) {
            return TemplateExpressionFormatter.addBackticks(value);
        }
        return value;
    }
}
//# sourceMappingURL=PropValueHelpers.js.map