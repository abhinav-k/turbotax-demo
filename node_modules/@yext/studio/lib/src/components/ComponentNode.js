import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ComponentStateHelpers, ComponentStateKind, } from "@yext/studio-plugin";
import { ReactComponent as Vector } from "../icons/vector.svg";
import classNames from "classnames";
import ComponentKindIcon from "./ComponentKindIcon";
import { useCallback, useMemo } from "react";
import useStudioStore from "../store/useStudioStore";
import RemoveElementButton from "./RemoveElementButton";
import { getComponentDisplayName } from "../hooks/useActiveComponentName";
import { Tooltip } from "react-tooltip";
/**
 * ComponentNode is a single node in a ComponentTree;
 */
export default function ComponentNode(props) {
    const { componentState, depth, isOpen, onToggle, hasChild } = props;
    const [activeComponentUUID, setActiveComponentUUID] = useStudioStore((store) => {
        return [
            store.pages.activeComponentUUID,
            store.pages.setActiveComponentUUID,
        ];
    });
    const isActiveComponent = activeComponentUUID === componentState.uuid;
    const vectorClassName = classNames("cursor-pointer", {
        "rotate-90": isOpen,
        invisible: !hasChild,
    });
    const handleClick = useCallback(() => {
        setActiveComponentUUID(componentState.uuid);
    }, [componentState.uuid, setActiveComponentUUID]);
    const componentNodeStyle = useMemo(() => ({ paddingLeft: `${depth}em` }), [depth]);
    const extractedState = ComponentStateHelpers.extractRepeatedState(componentState);
    const isErrorState = extractedState.kind === ComponentStateKind.Error;
    const componentNodeClasses = classNames("flex pr-4 items-center justify-between h-9", {
        "bg-blue-100": isActiveComponent,
        "hover:bg-gray-100": !isActiveComponent,
        "text-red-500": isErrorState,
    });
    const anchorId = `ComponentNode-${componentState.uuid}`;
    const handleToggle = useCallback(() => {
        onToggle(componentState.uuid, !isOpen);
    }, [componentState.uuid, isOpen, onToggle]);
    return (_jsxs("div", { className: componentNodeClasses, style: componentNodeStyle, children: [_jsxs("div", { className: "flex grow items-center cursor-pointer", onClick: handleClick, id: anchorId, children: [_jsx(Vector, { className: vectorClassName, onClick: handleToggle }), _jsx("div", { className: "pl-2", children: _jsx(ComponentKindIcon, { componentState: componentState }) }), _jsx("span", { className: "pl-1.5", children: getComponentDisplayName(componentState) }), isErrorState && (_jsx(Tooltip, { content: extractedState.message, anchorId: anchorId, place: "right" }))] }), isActiveComponent && (_jsx(RemoveElementButton, { elementUUID: componentState.uuid }))] }));
}
//# sourceMappingURL=ComponentNode.js.map