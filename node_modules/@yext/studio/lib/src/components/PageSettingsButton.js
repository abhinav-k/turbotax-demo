import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import useStudioStore from "../store/useStudioStore";
import { ReactComponent as Gear } from "../icons/gear.svg";
import { useCallback, useMemo } from "react";
import ButtonWithModal from "./common/ButtonWithModal";
import FormModal from "./common/FormModal";
import { Tooltip } from "react-tooltip";
import { PropValueKind } from "@yext/studio-plugin";
import TemplateExpressionFormatter from "../utils/TemplateExpressionFormatter";
import PropValueHelpers from "../utils/PropValueHelpers";
const formData = {
    url: { description: "URL slug:" },
};
/**
 * Renders a button for editing the page-level settings for a PagesJS repo.
 * When the button is clicked, a modal is displayed where the information can
 * be edited.
 */
export default function PageSettingsButton({ pageName, }) {
    const [currGetPathValue, updateGetPathValue, isEntityPage] = useStudioStore((store) => [
        store.pages.pages[pageName].pagesJS?.getPathValue,
        store.pages.updateGetPathValue,
        !!store.pages.pages[pageName].pagesJS?.streamScope,
    ]);
    const initialFormValue = useMemo(() => ({ url: getUrlDisplayValue(currGetPathValue, isEntityPage) }), [currGetPathValue, isEntityPage]);
    const handleModalSave = useCallback((form) => {
        const getPathValue = isEntityPage
            ? {
                kind: PropValueKind.Expression,
                value: TemplateExpressionFormatter.getRawValue(form.url),
            }
            : {
                kind: PropValueKind.Literal,
                value: form.url,
            };
        updateGetPathValue(pageName, getPathValue);
        return true;
    }, [updateGetPathValue, pageName, isEntityPage]);
    const renderModal = useCallback((isOpen, handleClose) => {
        return (_jsx(FormModal, { isOpen: isOpen, title: "Page Settings", formData: formData, initialFormValue: initialFormValue, requireChangesToSubmit: true, handleClose: handleClose, handleConfirm: handleModalSave, transformOnChangeValue: isEntityPage
                ? TemplateExpressionFormatter.convertCurlyBracesToSquareBrackets
                : undefined }));
    }, [handleModalSave, initialFormValue, isEntityPage]);
    const disabled = !currGetPathValue;
    const tooltipAnchorID = `PageSettingsButton-${pageName}`;
    return (_jsxs("div", { id: tooltipAnchorID, children: [_jsx(ButtonWithModal, { buttonContent: _jsx(Gear, {}), renderModal: renderModal, ariaLabel: `Edit ${pageName} Page Settings`, disabled: disabled, buttonClassName: "text-gray-800 disabled:text-gray-400" }), disabled && (_jsx(Tooltip, { anchorId: tooltipAnchorID, content: "No settings available to edit via the UI." }))] }));
}
function getUrlDisplayValue(getPathValue, isEntityPage) {
    if (!isEntityPage) {
        return getPathValue?.value ?? "";
    }
    const getPathExpression = PropValueHelpers.getTemplateExpression(getPathValue ?? { kind: PropValueKind.Literal, value: "" });
    return TemplateExpressionFormatter.getTemplateStringDisplayValue(getPathExpression);
}
//# sourceMappingURL=PageSettingsButton.js.map