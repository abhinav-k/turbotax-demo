import { jsx as _jsx } from "react/jsx-runtime";
import FormModal from "../common/FormModal";
import ButtonWithModal from "../common/ButtonWithModal";
import useStudioStore from "../../store/useStudioStore";
import { useCallback, useState } from "react";
import { ComponentStateKind } from "@yext/studio-plugin";
const formData = {
    modulePath: { description: "Give the module a name:" },
};
/**
 * Renders a button for creating a module.
 */
export default function CreateModuleButton() {
    const [getActiveComponentState, createModule] = useStudioStore((store) => [
        store.actions.getActiveComponentState,
        store.createModule,
    ]);
    const [errorMessage, setErrorMessage] = useState("");
    const handleModalSave = useCallback((form) => {
        try {
            createModule(form.modulePath);
            return true;
        }
        catch (err) {
            if (err instanceof Error) {
                setErrorMessage(err.message);
                return false;
            }
            else {
                throw err;
            }
        }
    }, [setErrorMessage, createModule]);
    const renderModal = useCallback((isOpen, handleClose) => {
        return (_jsx(FormModal, { isOpen: isOpen, title: "Create Module", formData: formData, errorMessage: errorMessage, handleClose: handleClose, handleConfirm: handleModalSave }));
    }, [errorMessage, handleModalSave]);
    const activeComponentState = getActiveComponentState();
    if (!activeComponentState ||
        activeComponentState.kind === ComponentStateKind.Module) {
        return null;
    }
    return (_jsx(ButtonWithModal, { buttonContent: "Create Module", buttonClassName: "ml-4 py-1 px-3 text-gray-900 text-sm bg-gray-200 hover:bg-gray-300 rounded-md", renderModal: renderModal }));
}
//# sourceMappingURL=CreateModuleButton.js.map