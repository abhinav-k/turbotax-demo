import { jsx as _jsx } from "react/jsx-runtime";
import { ComponentStateKind, TypeGuards, } from "@yext/studio-plugin";
import { createElement, Fragment, useMemo } from "react";
import usePreviewProps from "../hooks/usePreviewProps";
import useStudioStore from "../store/useStudioStore";
import RepeaterPreview from "./RepeaterPreview";
import ErrorComponentPreview from "./ErrorComponentPreview";
import ModulePreview from "./ModulePreview";
/**
 * Renders the preview for a component.
 */
export default function ComponentPreview({ componentState, expressionSources, childElements = [], parentItem, }) {
    const previewProps = usePreviewProps(componentState, expressionSources, parentItem);
    const element = useElement(componentState, (type) => createElement(type, previewProps, ...childElements));
    if (TypeGuards.isModuleState(componentState)) {
        return (_jsx(ModulePreview, { previewProps: previewProps, expressionSources: expressionSources, moduleState: componentState }));
    }
    else if (TypeGuards.isRepeaterState(componentState)) {
        return (_jsx(RepeaterPreview, { repeaterState: componentState, expressionSources: expressionSources }));
    }
    else if (componentState.kind === ComponentStateKind.Error) {
        return (_jsx(ErrorComponentPreview, { element: element, errorComponentState: componentState }));
    }
    return element;
}
function useElement(c, createElement) {
    const UUIDToImportedComponent = useStudioStore((store) => store.fileMetadatas.UUIDToImportedComponent);
    const element = useMemo(() => {
        if (TypeGuards.isRepeaterState(c) || TypeGuards.isModuleState(c)) {
            return undefined;
        }
        else if (c.kind === ComponentStateKind.Fragment) {
            return Fragment;
        }
        else if (c.kind === ComponentStateKind.BuiltIn) {
            return c.componentName;
        }
        else {
            const importedComponent = UUIDToImportedComponent[c.metadataUUID];
            if (!importedComponent) {
                console.warn(`Expected to find component loaded for ${c.componentName} but none found - possibly due to a race condition.`);
                return undefined;
            }
            return importedComponent;
        }
    }, [c, UUIDToImportedComponent]);
    return element ? createElement(element) : null;
}
//# sourceMappingURL=ComponentPreview.js.map