import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useContext, useState } from "react";
import ButtonWithModal from "../common/ButtonWithModal";
import { ReactComponent as Plus } from "../../icons/plus.svg";
import AddPageContext from "./AddPageContext";
import useStudioStore from "../../store/useStudioStore";
import AddPageContextProvider from "./AddPageContextProvider";
import { FlowStep, flowStepModalMap } from "./FlowStep";
export default function AddPageButton() {
    return (_jsx(AddPageContextProvider, { children: _jsx(AddPageButtonInternal, {}) }));
}
function AddPageButtonInternal() {
    const [isPagesJSRepo, createPage] = useStudioStore((store) => [
        store.studioConfig.isPagesJSRepo,
        store.actions.createPage,
    ]);
    const [step, setStep] = useState(getInitialStep(isPagesJSRepo));
    const { state, actions } = useContext(AddPageContext);
    const { resetState } = actions;
    const handleConfirm = useCallback(async (pageName = "", getPathVal) => {
        switch (step) {
            case FlowStep.SelectPageType:
                setStep(state.isStatic ? FlowStep.GetBasicPageData : FlowStep.GetStreamScope);
                break;
            case FlowStep.GetStreamScope:
                setStep(FlowStep.GetBasicPageData);
                break;
            case FlowStep.GetBasicPageData:
                await createPage(pageName, getPathVal, state.streamScope);
                break;
        }
    }, [step, createPage, state]);
    const decorateHandleClose = useCallback((handleClose) => async () => {
        await handleClose();
        setStep(getInitialStep(isPagesJSRepo));
        resetState();
    }, [isPagesJSRepo, resetState]);
    const renderModal = useCallback((isOpen, handleClose) => {
        const FlowStepModal = flowStepModalMap[step];
        return (_jsx(FlowStepModal, { isOpen: isOpen, handleClose: decorateHandleClose(handleClose), handleConfirm: handleConfirm }));
    }, [step, handleConfirm, decorateHandleClose]);
    return (_jsx(ButtonWithModal, { buttonContent: _jsx(Plus, {}), renderModal: renderModal, ariaLabel: "Add Page" }));
}
function getInitialStep(isPagesJSRepo) {
    return isPagesJSRepo ? FlowStep.SelectPageType : FlowStep.GetBasicPageData;
}
//# sourceMappingURL=AddPageButton.js.map