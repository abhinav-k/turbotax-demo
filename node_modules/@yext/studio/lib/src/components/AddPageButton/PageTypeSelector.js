import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useContext, useMemo } from "react";
import AddPageContext from "./AddPageContext";
import Modal from "../common/Modal";
var PageType;
(function (PageType) {
    PageType["Static"] = "Static";
    PageType["Entity"] = "Entity";
})(PageType || (PageType = {}));
export default function PageTypeSelector({ isOpen, handleClose, handleConfirm, }) {
    const { state, actions } = useContext(AddPageContext);
    const { isStatic } = state;
    const { setIsStatic } = actions;
    const onChange = useCallback((e) => {
        setIsStatic(e.target.name === PageType.Static);
    }, [setIsStatic]);
    const body = useMemo(() => (_jsx("div", { className: "ml-4", children: Object.values(PageType).map((pageType) => (_jsxs("div", { children: [_jsx("input", { type: "radio", className: "mr-2", onChange: onChange, checked: pageType === PageType.Static ? isStatic : !isStatic, name: pageType }), pageType, " Page"] }, pageType))) })), [isStatic, onChange]);
    return (_jsx(Modal, { isOpen: isOpen, handleClose: handleClose, handleConfirm: handleConfirm, title: "Select Page Type", body: body, confirmButtonText: "Next" }));
}
//# sourceMappingURL=PageTypeSelector.js.map