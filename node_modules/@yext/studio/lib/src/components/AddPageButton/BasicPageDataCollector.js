import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useContext, useMemo, useState } from "react";
import FormModal from "../common/FormModal";
import useStudioStore from "../../store/useStudioStore";
import AddPageContext from "./AddPageContext";
import TemplateExpressionFormatter from "../../utils/TemplateExpressionFormatter";
import { PropValueKind } from "@yext/studio-plugin";
export default function BasicPageDataCollector({ isOpen, handleClose, handleConfirm, }) {
    const [errorMessage, setErrorMessage] = useState("");
    const isPagesJSRepo = useStudioStore((store) => store.studioConfig.isPagesJSRepo);
    const { state } = useContext(AddPageContext);
    const isEntityPage = isPagesJSRepo && !state.isStatic;
    const formData = useMemo(() => ({
        pageName: { description: "Give the page a name:" },
        ...(isPagesJSRepo && { url: { description: "Specify the URL slug:" } }),
    }), [isPagesJSRepo]);
    const initialFormValue = useMemo(() => {
        return isEntityPage ? { pageName: "", url: "[[slug]]" } : undefined;
    }, [isEntityPage]);
    const onConfirm = useCallback(async (data) => {
        try {
            const getPathValue = data.url
                ? createGetPathVal(data.url, isEntityPage)
                : undefined;
            await handleConfirm(data.pageName, getPathValue);
            return true;
        }
        catch (err) {
            if (err instanceof Error) {
                setErrorMessage(err.message);
                return false;
            }
            else {
                throw err;
            }
        }
    }, [handleConfirm, isEntityPage]);
    const transformOnChangeValue = useCallback((value, field) => isEntityPage && field === "url"
        ? TemplateExpressionFormatter.convertCurlyBracesToSquareBrackets(value)
        : value, [isEntityPage]);
    const modalTitle = isPagesJSRepo ? "Specify Page Name and URL" : "Add Page";
    return (_jsx(FormModal, { isOpen: isOpen, title: modalTitle, formData: formData, initialFormValue: initialFormValue, errorMessage: errorMessage, handleClose: handleClose, handleConfirm: onConfirm, transformOnChangeValue: transformOnChangeValue }));
}
function createGetPathVal(url, isEntityPage) {
    return isEntityPage
        ? {
            kind: PropValueKind.Expression,
            value: TemplateExpressionFormatter.getRawValue(url),
        }
        : {
            kind: PropValueKind.Literal,
            value: url,
        };
}
//# sourceMappingURL=BasicPageDataCollector.js.map