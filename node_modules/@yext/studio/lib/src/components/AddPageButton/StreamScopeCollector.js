import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useContext } from "react";
import FormModal from "../common/FormModal";
import AddPageContext from "./AddPageContext";
const formData = {
    entityIds: {
        description: "Entity IDs:",
        optional: true,
    },
    entityTypes: {
        description: "Entity Types:",
        optional: true,
    },
    savedFilterIds: {
        description: "Saved Filter IDs:",
        optional: true,
    },
};
export default function StreamScopeCollector({ isOpen, handleClose, handleConfirm, }) {
    const { actions } = useContext(AddPageContext);
    const onConfirm = useCallback(async (data) => {
        const streamScope = Object.entries(data).reduce((scope, [key, val]) => {
            const values = val
                .split(",")
                .map((str) => str.trim())
                .filter((str) => str);
            if (values.length > 0) {
                scope[key] = values;
            }
            return scope;
        }, {});
        actions.setStreamScope(streamScope);
        await handleConfirm();
        return true;
    }, [handleConfirm, actions]);
    return (_jsx(FormModal, { isOpen: isOpen, title: "Specify the Stream Scope", instructions: "Use the optional fields below to define the scope of the\n        stream for the entity page. Values should be separated by commas.", formData: formData, closeOnConfirm: false, confirmButtonText: "Next", handleClose: handleClose, handleConfirm: onConfirm }));
}
//# sourceMappingURL=StreamScopeCollector.js.map