import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import useStudioStore from "../store/useStudioStore";
import { ReactComponent as Check } from "../icons/check.svg";
import classNames from "classnames";
import { useMemo } from "react";
import RemovePageButton from "./RemovePageButton";
import { Tooltip } from "react-tooltip";
import PageSettingsButton from "./PageSettingsButton";
/**
 * ActivePagePanel displays the available pages and allows the user to switch
 * between them.
 */
export default function ActivePagePanel() {
    const [pages, errorPages] = useStudioStore((store) => [
        store.pages.pages,
        store.pages.errorPages,
    ]);
    const pageNames = useMemo(() => {
        const names = Object.keys(pages);
        names.sort();
        return names;
    }, [pages]);
    return (_jsxs("ul", { className: "flex flex-col pb-2 items-stretch", children: [pageNames.map((pageName) => (_jsx(PageItem, { pageName: pageName }, pageName))), Object.keys(errorPages).map((pageName) => (_jsx(ErrorPageItem, { pageName: pageName, errorMessage: errorPages[pageName].message }, pageName)))] }));
}
function PageItem({ pageName }) {
    const [updateActivePage, activePageName, moduleUUIDBeingEdited, isPagesJSRepo,] = useStudioStore((store) => [
        store.actions.updateActivePage,
        store.pages.activePageName,
        store.pages.moduleUUIDBeingEdited,
        store.studioConfig.isPagesJSRepo,
    ]);
    const isActivePage = !moduleUUIDBeingEdited && activePageName === pageName;
    const checkClasses = classNames({
        invisible: !isActivePage,
    });
    function handleSelectPage() {
        void updateActivePage(pageName);
    }
    return (_jsxs(ListItem, { children: [_jsxs("div", { className: "flex items-center", children: [_jsx(Check, { className: checkClasses }), _jsx("button", { disabled: isActivePage, onClick: handleSelectPage, className: "ml-2", children: pageName })] }), _jsxs("div", { className: "flex items-center space-x-3", children: [isPagesJSRepo && _jsx(PageSettingsButton, { pageName: pageName }), _jsx(RemovePageButton, { pageName: pageName })] })] }));
}
function ErrorPageItem(props) {
    const { pageName, errorMessage } = props;
    const anchorId = `ErrorPageState-${pageName}`;
    return (_jsx(ListItem, { additionalClassNames: "text-red-300", children: _jsxs("div", { className: "flex items-center", id: anchorId, children: [_jsx(Tooltip, { anchorId: anchorId, content: errorMessage, className: "max-w-lg text-xs" }), _jsx(Check, { className: "invisible" }), _jsx("div", { className: "ml-2", children: pageName })] }) }));
}
function ListItem(props) {
    const additionalClassNames = props.additionalClassNames ?? "";
    const className = "flex justify-between pb-4 px-2 " + additionalClassNames;
    return _jsx("li", { className: className, children: props.children });
}
//# sourceMappingURL=ActivePagePanel.js.map