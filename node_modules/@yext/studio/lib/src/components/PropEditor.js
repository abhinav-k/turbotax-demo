import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PropValueKind, PropValueType, } from "@yext/studio-plugin";
import { Tooltip } from "react-tooltip";
import PropInput from "./PropInput";
import useOnPropChange from "../hooks/useOnPropChange";
const tooltipStyle = { backgroundColor: "black" };
/**
 * Renders an input editor for a single prop of a component or module.
 */
export default function PropEditor({ propName, propMetadata, propValue, propKind, onPropChange, isNested, }) {
    const { type, doc, unionValues } = propMetadata;
    const onChange = useOnPropChange(propKind, propName, onPropChange, type);
    return (_jsxs("div", { className: "flex items-center mb-2 text-sm", children: [renderBranchUI(isNested), _jsxs("label", { className: "flex h-10 items-center justify-self-start", children: [_jsx("p", { className: "pr-2", children: propName }), _jsx(PropInput, { ...{
                            propType: getInputPropType(propMetadata, propKind),
                            propValue,
                            onChange,
                            propKind,
                        }, unionValues: unionValues })] }), doc && (_jsx(Tooltip, { style: tooltipStyle, anchorId: propName, content: doc, place: "top" }))] }));
}
export function renderBranchUI(isNested) {
    return (isNested && (_jsx("div", { className: "mr-1 text-gray-200 -ml-0.5 tracking-[-.2em] whitespace-nowrap", children: "---" })));
}
function getInputPropType(propMetadata, propKind) {
    if (propKind === PropValueKind.Expression &&
        propMetadata.type !== PropValueType.Array) {
        return { type: PropValueType.string };
    }
    return propMetadata;
}
//# sourceMappingURL=PropEditor.js.map