import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { TypeGuards } from "@yext/studio-plugin";
import { useCallback } from "react";
import { Tooltip } from "react-tooltip";
import useStudioStore from "../store/useStudioStore";
import FieldPickerInput from "./FieldPicker/FieldPickerInput";
import Toggle from "./common/Toggle";
const tooltipAnchorID = "YextStudio-listRepeaterToggle";
export default function RepeaterEditor({ componentState, }) {
    const [hasChildren, updateRepeaterListExpression, addRepeater, removeRepeater,] = useStudioStore((store) => [
        store.actions.getComponentHasChildren(componentState.uuid),
        store.actions.updateRepeaterListExpression,
        store.actions.addRepeater,
        store.actions.removeRepeater,
    ]);
    const isChecked = TypeGuards.isRepeaterState(componentState);
    const onToggle = useCallback(() => {
        isChecked ? removeRepeater(componentState) : addRepeater(componentState);
    }, [addRepeater, removeRepeater, componentState, isChecked]);
    const updateListExpression = useCallback((value) => {
        isChecked && updateRepeaterListExpression(value, componentState);
    }, [componentState, isChecked, updateRepeaterListExpression]);
    const handleListUpdate = useCallback((e) => {
        updateListExpression(e.target.value);
    }, [updateListExpression]);
    return (_jsxs(_Fragment, { children: [_jsx("div", { className: "font-bold pb-2", children: "Repeaters" }), _jsxs("label", { className: "flex mb-2", children: [_jsx("span", { className: "w-1/2", children: "List" }), _jsx(Toggle, { id: tooltipAnchorID, checked: isChecked, disabled: hasChildren, onToggle: onToggle }), hasChildren && (_jsx(Tooltip, { anchorId: tooltipAnchorID, content: "Unable to list a container with children" }))] }), isChecked && (_jsxs("label", { className: "flex flex-col mb-2", children: [_jsx("span", { children: "List Field" }), _jsx(FieldPickerInput, { displayValue: componentState.listExpression, onInputChange: handleListUpdate, handleFieldSelection: updateListExpression, fieldFilter: Array.isArray })] }))] }));
}
//# sourceMappingURL=RepeaterEditor.js.map