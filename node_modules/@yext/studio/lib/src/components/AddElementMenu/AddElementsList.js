import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FileMetadataKind } from "@yext/studio-plugin";
import { useCallback } from "react";
import useStudioStore from "../../store/useStudioStore";
import path from "path-browserify";
import { ElementType } from "./AddElementMenu";
import renderIconForType from "../common/renderIconForType";
/**
 * The list of available, addable elements for the current activeType.
 */
export default function AddElementsList({ activeType, }) {
    const UUIDToFileMetadata = useStudioStore((store) => {
        return store.fileMetadatas.UUIDToFileMetadata;
    });
    const addableElements = Object.values(UUIDToFileMetadata).filter((metadata) => {
        if (activeType === ElementType.Components) {
            return (metadata.kind === FileMetadataKind.Component &&
                !metadata.acceptsChildren);
        }
        else if (activeType === ElementType.Containers) {
            return !!(metadata.kind === FileMetadataKind.Component &&
                metadata.acceptsChildren);
        }
        else {
            return metadata.kind === FileMetadataKind.Module;
        }
    });
    if (addableElements.length === 0) {
        return (_jsx("div", { className: "flex flex-col items-start py-3 pl-6 opacity-50", children: "Nothing to see here!" }));
    }
    return (_jsx("div", { className: "flex flex-col items-start py-1", children: addableElements.map((metadata) => {
            return (_jsx(Option, { metadata: metadata, activeType: activeType }, metadata.metadataUUID));
        }) }));
}
function Option({ metadata, activeType, }) {
    const componentName = path.basename(metadata.filepath, ".tsx");
    const moduleMetadataBeingEdited = useStudioStore((store) => store.actions.getModuleMetadataBeingEdited());
    const addComponent = useStudioStore((store) => {
        return store.actions.addComponent;
    });
    const handleClick = useCallback(() => {
        addComponent(metadata);
    }, [addComponent, metadata]);
    // Prevent users from adding infinite looping modules.
    const isSameAsActiveModule = moduleMetadataBeingEdited?.metadataUUID === metadata.metadataUUID;
    return (_jsxs("button", { className: "flex items-center gap-x-2 px-6 py-2 cursor-pointer hover:bg-gray-100 disabled:opacity-25 w-full text-left", onClick: handleClick, "aria-label": `Add ${componentName} Element`, disabled: isSameAsActiveModule, children: [renderIconForType(activeType), componentName] }));
}
//# sourceMappingURL=AddElementsList.js.map