/// <reference types="react" />
type Form = {
    [field: string]: string;
};
export type FormData<T extends Form> = {
    [field in keyof T]: {
        description: string;
        optional?: boolean;
    };
};
interface FormModalProps<T extends Form> {
    isOpen: boolean;
    title: string;
    instructions?: string;
    formData: FormData<T>;
    initialFormValue?: T;
    errorMessage?: string;
    confirmButtonText?: string;
    closeOnConfirm?: boolean;
    requireChangesToSubmit?: boolean;
    handleClose: () => void | Promise<void>;
    handleConfirm: (form: T) => boolean | Promise<boolean>;
    transformOnChangeValue?: (value: string, field: string) => string;
}
export default function FormModal<T extends Form>({ isOpen, title, instructions, formData, initialFormValue, errorMessage, confirmButtonText, closeOnConfirm, requireChangesToSubmit, handleClose: customHandleClose, handleConfirm: customHandleConfirm, transformOnChangeValue, }: FormModalProps<T>): JSX.Element;
export {};
//# sourceMappingURL=FormModal.d.ts.map