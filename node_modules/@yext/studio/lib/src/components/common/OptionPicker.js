import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useState } from "react";
import { useComposedCssClasses } from "../../hooks/useComposedCssClasses";
const builtInCssClasses = {
    container: "min-w-fit bg-gray-300 flex flex-row p-1 rounded-md mb-6",
    option: "flex items-center justify-center grow rounded-md p-2 text-gray-500",
    selectedOption: "flex items-center justify-center grow rounded-md p-2 drop-shadow bg-white",
};
export default function OptionPicker({ options, icons, defaultOption, onSelect, customCssClasses, }) {
    const [selectedOption, setOption] = useState(defaultOption);
    const onClick = useCallback((option) => {
        setOption(option);
        onSelect(option);
    }, [onSelect]);
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    return (_jsx("nav", { className: cssClasses.container, children: Object.values(options).map((option, index) => {
            return (_jsx(Option, { option: option, icon: icons?.[option], isSelected: option === selectedOption, onClick: onClick, cssClasses: cssClasses }, index));
        }) }));
}
function Option({ option, icon, onClick, isSelected, cssClasses, }) {
    const onClickCallback = useCallback(() => {
        onClick(option);
    }, [onClick, option]);
    return (_jsx("button", { onClick: onClickCallback, className: isSelected ? cssClasses?.selectedOption : cssClasses?.option, "aria-label": option, children: icon && _jsx("div", { className: "mr-2", children: icon }) }, option));
}
//# sourceMappingURL=OptionPicker.js.map