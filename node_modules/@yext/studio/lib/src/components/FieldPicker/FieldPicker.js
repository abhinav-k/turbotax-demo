import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useRef, useState } from "react";
import FieldDropdown from "./FieldDropdown";
import { ReactComponent as EmbedIcon } from "../../icons/embed.svg";
import useRootClose from "@restart/ui/useRootClose";
/**
 * An icon that when clicked on, opens up a dropdown for selecting
 * entity data fields.
 */
export default function FieldPicker({ handleFieldSelection, filteredEntityData, }) {
    const [expandedFieldId, setExpandedFieldId] = useState();
    const containerRef = useRef(null);
    useRootClose(containerRef, () => {
        setExpandedFieldId(undefined);
    });
    const fieldPickerIsClosed = expandedFieldId === undefined;
    const togglePicker = useCallback((e) => {
        e.preventDefault();
        if (fieldPickerIsClosed) {
            setExpandedFieldId("");
        }
        else {
            setExpandedFieldId(undefined);
        }
    }, [fieldPickerIsClosed]);
    const handleFieldDropdownSelection = useCallback((fieldId) => {
        handleFieldSelection(`document.${fieldId}`);
        setExpandedFieldId(undefined);
    }, [handleFieldSelection]);
    const handleNestedObjectSelection = useCallback((fieldId) => {
        if (expandedFieldId !== fieldId) {
            setExpandedFieldId(fieldId);
        }
        else {
            const parentFieldId = fieldId.substring(0, fieldId.lastIndexOf("."));
            setExpandedFieldId(parentFieldId);
        }
    }, [expandedFieldId]);
    const isExpandedFieldId = useCallback((fieldId) => {
        return !!expandedFieldId?.startsWith(fieldId);
    }, [expandedFieldId]);
    return (_jsxs("div", { ref: containerRef, children: [_jsx(EmbedIcon, { role: "button", onClick: togglePicker, className: "hover:opacity-100 opacity-50 cursor-pointer", "aria-label": "Toggle field picker" }), !fieldPickerIsClosed && (_jsx(FieldDropdown, { fieldIdToValue: filteredEntityData, handleFieldSelection: handleFieldDropdownSelection, handleNestedObjectSelection: handleNestedObjectSelection, isExpandedFieldId: isExpandedFieldId }))] }));
}
//# sourceMappingURL=FieldPicker.js.map