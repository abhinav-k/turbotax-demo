import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import { useCallback } from "react";
import { ReactComponent as VectorIcon } from "../../icons/vector.svg";
import { startCase } from "lodash";
const listStyles = {
    minWidth: "200px",
    right: "1em",
};
/**
 * FieldDropdown renders a dropdown for picking entity data fields.
 * When an object field is encountered, FieldDropdown will open a child
 * FieldDropdown for rendering the object field.
 */
export default function FieldDropdown(props) {
    const { parentFieldId, isExpandedFieldId } = props;
    if (parentFieldId && !isExpandedFieldId(parentFieldId)) {
        return null;
    }
    return (_jsx("ul", { className: "absolute w-max bg-white mt-2 rounded border z-10 shadow-2xl", style: listStyles, children: Object.keys(props.fieldIdToValue).map((subfieldId) => {
            return _createElement(Item, { subfieldId: subfieldId, ...props, key: subfieldId });
        }) }));
}
function Item(props) {
    const { subfieldId, fieldIdToValue, parentFieldId, ...callbacks } = props;
    const { handleNestedObjectSelection, handleFieldSelection } = callbacks;
    const value = fieldIdToValue[subfieldId];
    const isObject = typeof value === "object" && !Array.isArray(value) && value !== null;
    const fieldId = parentFieldId ? `${parentFieldId}.${subfieldId}` : subfieldId;
    const handleClick = useCallback((e) => {
        e.stopPropagation();
        e.preventDefault();
        if (isObject) {
            handleNestedObjectSelection(fieldId);
        }
        else {
            handleFieldSelection(fieldId);
        }
    }, [fieldId, handleNestedObjectSelection, handleFieldSelection, isObject]);
    const displayValue = startCase(subfieldId.split("c_").at(-1));
    return (_jsxs("li", { className: "hover:bg-gray-100 px-4 py-1 cursor-pointer flex justify-between", onClick: handleClick, children: [displayValue, isObject && (_jsxs("div", { className: "flex items-center", children: [_jsx(VectorIcon, {}), _jsx("div", { className: "mt-4", children: _jsx(FieldDropdown, { fieldIdToValue: value, parentFieldId: fieldId, ...callbacks }) })] }))] }));
}
//# sourceMappingURL=FieldDropdown.js.map