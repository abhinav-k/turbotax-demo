import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { get } from "lodash";
import { useCallback, useMemo } from "react";
import ComponentPreview from "./ComponentPreview";
/**
 * Renders the preview for a Repeater component.
 */
export default function RepeaterPreview({ repeaterState, expressionSources, }) {
    const { repeatedComponent, listExpression } = repeaterState;
    const repeatedElementState = useMemo(() => ({
        ...repeatedComponent,
        uuid: repeaterState.uuid,
        parentUUID: repeaterState.parentUUID,
    }), [repeatedComponent, repeaterState]);
    const renderRepeatedElement = useCallback((item, key) => (_jsx(ComponentPreview, { componentState: repeatedElementState, expressionSources: expressionSources, parentItem: item }, key)), [repeatedElementState, expressionSources]);
    const list = get(expressionSources, listExpression);
    if (!Array.isArray(list)) {
        console.warn(`Unable to render list repeater. Expected "${listExpression}" to reference an array in `, expressionSources);
        return null;
    }
    return _jsx(_Fragment, { children: list.map(renderRepeatedElement) });
}
//# sourceMappingURL=RepeaterPreview.js.map