import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { isEqual } from "lodash";
import { Component } from "react";
import { findDOMNode } from "react-dom";
import useStudioStore from "../store/useStudioStore";
import rectToJson from "../utils/rectToJson";
/**
 * HighlightingContainer is intended to be used as a wrapper around a
 * single rendered Studio component.
 *
 * When this container is clicked, it sets it's child component as the
 * current active component, and adds highlighting styling around it.
 */
export default function HighlightingContainer(props) {
    const [setActiveUUID, setRect, rect, activeComponentUUID] = useStudioStore((store) => [
        store.pages.setActiveComponentUUID,
        store.pages.setActiveComponentRect,
        store.pages.activeComponentRect,
        store.pages.activeComponentUUID,
    ]);
    return (_jsx(HighlightingClass, { uuid: props.uuid, setRect: setRect, setActiveUUID: setActiveUUID, activeComponentUUID: activeComponentUUID, rect: rect, children: props.children }));
}
class HighlightingClass extends Component {
    resizeObserver;
    constructor(props) {
        super(props);
        this.resizeObserver = new ResizeObserver(() => {
            if (this.props.uuid === this.props.activeComponentUUID) {
                this.highlightSelf();
            }
        });
    }
    highlightSelf = (e) => {
        e?.stopImmediatePropagation();
        const childNode = findDOMNode(this);
        if (!(childNode instanceof HTMLElement)) {
            return;
        }
        const rect = rectToJson(childNode.getBoundingClientRect());
        if (!isEqual(this.props.rect, rect)) {
            this.props.setRect(rect);
        }
        if (this.props.activeComponentUUID !== this.props.uuid) {
            this.props.setActiveUUID(this.props.uuid);
        }
    };
    attachListenerToChild() {
        const childNode = findDOMNode(this);
        if (!childNode || !(childNode instanceof HTMLElement)) {
            return;
        }
        childNode.addEventListener("click", this.highlightSelf);
        this.resizeObserver.observe(document.body);
    }
    componentDidUpdate() {
        this.attachListenerToChild();
        if (this.props.uuid === this.props.activeComponentUUID) {
            this.highlightSelf();
        }
    }
    componentWillUnmount() {
        const childNode = findDOMNode(this);
        if (!childNode || !(childNode instanceof HTMLElement)) {
            return;
        }
        childNode.removeEventListener("click", this.highlightSelf);
        this.resizeObserver.disconnect();
    }
    render() {
        return _jsx(_Fragment, { children: this.props.children });
    }
}
//# sourceMappingURL=HighlightingContainer.js.map