import {
  require_with_selector
} from "./chunk-ZZPAAZDR.js";
import {
  require_react
} from "./chunk-TYR45LGA.js";
import {
  __commonJS
} from "./chunk-LFBQMW2U.js";

// node_modules/zustand/vanilla.js
var require_vanilla = __commonJS({
  "node_modules/zustand/vanilla.js"(exports, module) {
    "use strict";
    var createStoreImpl = function createStoreImpl2(createState) {
      var state;
      var listeners = /* @__PURE__ */ new Set();
      var setState = function setState2(partial, replace) {
        var nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
          var _previousState = state;
          state = (replace != null ? replace : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
          listeners.forEach(function(listener) {
            return listener(state, _previousState);
          });
        }
      };
      var getState = function getState2() {
        return state;
      };
      var subscribe = function subscribe2(listener) {
        listeners.add(listener);
        return function() {
          return listeners.delete(listener);
        };
      };
      var destroy = function destroy2() {
        if (true) {
          console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.");
        }
        listeners.clear();
      };
      var api = {
        setState,
        getState,
        subscribe,
        destroy
      };
      state = createState(setState, getState, api);
      return api;
    };
    var createStore = function createStore2(createState) {
      return createState ? createStoreImpl(createState) : createStoreImpl;
    };
    var vanilla = function(createState) {
      if (true) {
        console.warn("[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.");
      }
      return createStore(createState);
    };
    exports.createStore = createStore;
    exports.default = vanilla;
    module.exports = vanilla;
    module.exports.createStore = createStore;
    exports.default = module.exports;
  }
});

// node_modules/zustand/index.js
var require_zustand = __commonJS({
  "node_modules/zustand/index.js"(exports, module) {
    "use strict";
    var vanilla = require_vanilla();
    var react$1 = require_react();
    var useSyncExternalStoreExports = require_with_selector();
    var useSyncExternalStoreWithSelector = useSyncExternalStoreExports.useSyncExternalStoreWithSelector;
    function useStore(api, selector, equalityFn) {
      if (selector === void 0) {
        selector = api.getState;
      }
      var slice = useSyncExternalStoreWithSelector(api.subscribe, api.getState, api.getServerState || api.getState, selector, equalityFn);
      react$1.useDebugValue(slice);
      return slice;
    }
    var createImpl = function createImpl2(createState) {
      if (typeof createState !== "function") {
        console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");
      }
      var api = typeof createState === "function" ? vanilla.createStore(createState) : createState;
      var useBoundStore = function useBoundStore2(selector, equalityFn) {
        return useStore(api, selector, equalityFn);
      };
      Object.assign(useBoundStore, api);
      return useBoundStore;
    };
    var create = function create2(createState) {
      return createState ? createImpl(createState) : createImpl;
    };
    var react = function(createState) {
      if (true) {
        console.warn("[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.");
      }
      return create(createState);
    };
    exports.create = create;
    exports.default = react;
    exports.useStore = useStore;
    Object.keys(vanilla).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return vanilla[k];
          }
        });
    });
    module.exports = react;
    module.exports.create = create;
    module.exports.useStore = useStore;
    module.exports.createStore = vanilla.createStore;
    exports.default = module.exports;
  }
});

// node_modules/zundo/dist/index.js
var require_dist = __commonJS({
  "node_modules/zundo/dist/index.js"(exports, module) {
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      temporal: () => temporal
    });
    module.exports = __toCommonJS(src_exports);
    var import_zustand = require_zustand();
    var createVanillaTemporal = (userSet, userGet, {
      partialize,
      equality,
      onSave,
      limit
    } = {}) => {
      return (0, import_zustand.createStore)()((set, get) => {
        return {
          pastStates: [],
          futureStates: [],
          undo: (steps = 1) => {
            const ps = get().pastStates.slice();
            const fs = get().futureStates.slice();
            if (ps.length === 0) {
              return;
            }
            const skippedPastStates = ps.splice(ps.length - (steps - 1));
            const pastState = ps.pop();
            if (pastState) {
              fs.push(partialize(userGet()));
              userSet(pastState);
            }
            fs.push(...skippedPastStates.reverse());
            set({ pastStates: ps, futureStates: fs });
          },
          redo: (steps = 1) => {
            const ps = get().pastStates.slice();
            const fs = get().futureStates.slice();
            if (fs.length === 0) {
              return;
            }
            const skippedFutureStates = fs.splice(fs.length - (steps - 1));
            const futureState = fs.pop();
            if (futureState) {
              ps.push(partialize(userGet()));
              userSet(futureState);
            }
            ps.push(...skippedFutureStates.reverse());
            set({ pastStates: ps, futureStates: fs });
          },
          clear: () => {
            set({ pastStates: [], futureStates: [] });
          },
          trackingStatus: "tracking",
          pause: () => {
            set({ trackingStatus: "paused" });
          },
          resume: () => {
            set({ trackingStatus: "tracking" });
          },
          setOnSave: (onSave2) => {
            set((state) => ({ __internal: { ...state.__internal, onSave: onSave2 } }));
          },
          __internal: {
            onSave,
            handleUserSet: (pastState) => {
              var _a;
              const { trackingStatus, pastStates, __internal } = get();
              const ps = pastStates.slice();
              const currentState = partialize(userGet());
              if (trackingStatus === "tracking" && !(equality == null ? void 0 : equality(currentState, pastState))) {
                if (limit && ps.length >= limit) {
                  ps.shift();
                }
                ps.push(pastState);
                (_a = __internal.onSave) == null ? void 0 : _a.call(__internal, pastState, currentState);
                set({ pastStates: ps, futureStates: [] });
              }
            }
          }
        };
      });
    };
    var zundoImpl = (config, {
      partialize = (state) => state,
      handleSet: userlandSetFactory = (handleSetCb) => handleSetCb,
      ...restOptions
    } = {}) => (set, get, _store) => {
      const temporalStore = createVanillaTemporal(set, get, {
        partialize,
        ...restOptions
      });
      const store = _store;
      const { setState } = store;
      store.temporal = temporalStore;
      const curriedUserLandSet = userlandSetFactory(
        temporalStore.getState().__internal.handleUserSet
      );
      const modifiedSetState = (state, replace) => {
        const pastState = partialize(get());
        setState(state, replace);
        curriedUserLandSet(pastState);
      };
      store.setState = modifiedSetState;
      const modifiedSetter = (state, replace) => {
        const pastState = partialize(get());
        set(state, replace);
        curriedUserLandSet(pastState);
      };
      return config(modifiedSetter, get, _store);
    };
    var temporal = zundoImpl;
  }
});
export default require_dist();
//# sourceMappingURL=zundo.js.map
