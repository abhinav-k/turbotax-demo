import "./chunk-LFBQMW2U.js";

// node_modules/@dhmk/utils/esm/error.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CustomError = (
  /** @class */
  function(_super) {
    __extends(CustomError2, _super);
    function CustomError2() {
      var _newTarget = this.constructor;
      var _a;
      var _this = _super.call(this) || this;
      Object.setPrototypeOf(_this, _newTarget.prototype);
      (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(
        // a key to successful extending
        Error,
        _this,
        _newTarget
      );
      return _this;
    }
    return CustomError2;
  }(Error)
);
var DomainError = (
  /** @class */
  function(_super) {
    __extends(DomainError2, _super);
    function DomainError2(a1, a2, a3, a4) {
      var _this = _super.call(this) || this;
      _this.context = a1;
      _this.error = a2 instanceof Error ? a2 : void 0;
      _this.code = (_this.error ? a3 : a2) || 0;
      _this.meta = _this.error ? a4 : a3;
      if (_this.error) {
        _this.message = _this.error.message;
        _this.toString = _this.error.toString.bind(_this.error);
      }
      return _this;
    }
    return DomainError2;
  }(CustomError)
);

// node_modules/@dhmk/utils/esm/std.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var id = function(x) {
  return x;
};
var shallowEqual = function(a, b) {
  var ka = Object.keys(a);
  var kb = Object.keys(b);
  return ka.length === kb.length && ka.every(function(k) {
    return a[k] === b[k];
  });
};
function objectFrom(entries) {
  return Array.from(entries).reduce(function(res, _a) {
    var k = _a[0], v = _a[1];
    res[k] = v;
    return res;
  }, {});
}
function objectMap(src, mapValue, mapKey) {
  if (mapKey === void 0) {
    mapKey = id;
  }
  return objectFrom(Object.keys(src).map(function(k) {
    return [
      mapKey(k, src[k], src),
      mapValue(src[k], k, src)
    ];
  }));
}
var mergeDeepRec = function(a, b) {
  if (!isPlainObject(a) || !isPlainObject(b))
    return b;
  var res = __assign({}, a);
  for (var k in b) {
    var v = b[k];
    res[k] = mergeDeepRec(a[k], v);
  }
  return res;
};
var mergeDeep = function(a, b) {
  return b ? mergeDeepRec(a, b) : function(b2) {
    return mergeDeepRec(b2, a);
  };
};
var isPlainObject = function(x) {
  return !!x && typeof x === "object" && Object.getPrototypeOf(x) === Object.prototype;
};

// node_modules/@dhmk/utils/esm/misc.js
function createCaseConverter(mapKey) {
  return function convertCase(obj) {
    if (obj && Object.getPrototypeOf(obj) === Object.prototype) {
      return objectMap(obj, convertCase, mapKey);
    } else if (Array.isArray(obj))
      return obj.map(convertCase);
    else
      return obj;
  };
}
var snakeToCamelCase = createCaseConverter(function(k) {
  return k.replace(/_(\w)/, function(_, x) {
    return x.toUpperCase();
  });
});
var camelToSnakeCase = createCaseConverter(function(k) {
  return k.replace(/([A-Z])/, function(_, x) {
    return "_" + x.toLowerCase();
  });
});

// node_modules/@dhmk/utils/esm/lens.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var getIn = function(x, path) {
  return path.reduce(function(src, k) {
    return src[k];
  }, x);
};
var setIn = function(x, path, v) {
  if (path.length === 0) {
    return typeof v === "function" ? v(x) : v;
  }
  var k = path[0], rest = path.slice(1);
  var value = setIn(x[k], rest, v);
  return Array.isArray(x) ? arraySet(x, Number(k), value) : objectSet(x, k, value);
};
var arraySet = function(x, k, v) {
  return x.map(function(_v, i) {
    return i === k ? v : _v;
  });
};
var objectSet = function(x, k, v) {
  var _a;
  return __assign2(__assign2({}, x), (_a = {}, _a[k] = v, _a));
};

// node_modules/@dhmk/zustand-lens/esm/index.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function createLens(set, get, path) {
  var normPath = typeof path === "string" ? [path] : path;
  var _set = function(partial, replace) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    return set.apply(void 0, __spreadArray([
      function(parentValue) {
        var ourOldValue = getIn(parentValue, normPath);
        var ourTmpValue = typeof partial === "function" ? partial(ourOldValue) : partial;
        var isPlain = isPlainObject(ourOldValue);
        var ourNextValue = replace || !isPlain ? ourTmpValue : __assign3(__assign3({}, ourOldValue), ourTmpValue);
        var isSame = isPlain ? shallowEqual(ourOldValue, ourNextValue) : ourOldValue === ourNextValue;
        return isSame ? parentValue : setIn(parentValue, normPath, ourNextValue);
      },
      false
    ], args, false));
  };
  var _get = function() {
    return getIn(get(), normPath);
  };
  return [_set, _get];
}
var LENS_TAG = "@dhmk/LENS_TAG";
var isLens = function(x) {
  return !!x && x[LENS_TAG];
};
function lens(fn) {
  var self = function(set, get, api, path) {
    var _a = createLens(set, get, path), _set = _a[0], _get = _a[1];
    return fn(_set, _get, api, path);
  };
  self[LENS_TAG] = true;
  return self;
}
var findLensAndCreate = function(x, set, get, api, path) {
  var _a, _b;
  if (path === void 0) {
    path = [];
  }
  var res = x;
  if (isPlainObject(x)) {
    res = {};
    var keys = Array().concat(
      Object.getOwnPropertyNames(x),
      (_b = (_a = Object.getOwnPropertySymbols) === null || _a === void 0 ? void 0 : _a.call(Object, x)) !== null && _b !== void 0 ? _b : []
      // ie 11
    );
    keys.forEach(function(k) {
      var v = x[k];
      if (typeof k === "symbol") {
        res[k] = v;
        return;
      }
      if (isLens(v)) {
        v = v(set, get, api, path.concat(k));
      }
      res[k] = findLensAndCreate(v, set, get, path.concat(k));
    });
  }
  return res;
};
var withLensesImpl = function(config) {
  return function(set, get, api) {
    var obj = typeof config === "function" ? config(set, get, api) : config;
    return findLensAndCreate(obj, set, get, api);
  };
};
var withLenses = withLensesImpl;
var customSetter = function(setter) {
  return function(fn) {
    return function(set, get, api, path) {
      return fn(setter(set), get, api, path);
    };
  };
};
var namedSetter = customSetter(function(set) {
  return function(partial, name, replace) {
    return set(partial, replace, name);
  };
});
export {
  createLens,
  customSetter,
  lens,
  mergeDeep,
  namedSetter,
  withLenses
};
//# sourceMappingURL=@dhmk_zustand-lens.js.map
